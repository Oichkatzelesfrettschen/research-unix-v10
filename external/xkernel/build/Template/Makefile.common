#
# $RCSfile: Makefile.common,v $
#
# x-kernel v3.2
#
# Copyright (c) 1993,1991,1990  Arizona Board of Regents
#
# $Revision: 1.42 $
# $Date: 1993/11/10 16:15:54 $
#
#
# Build-level makefile rules which are common to all platforms
#

ifndef XK_BYPASS_RCS

ifeq ($(RCS_VERSION),)
#
# This variable sets the RCS_VERSION to be the name of this source
# hierarchy directory.  It is only invoked if the RCS_VERSION
# environment variable is not set
# 
RCS_VERSION := $(shell cd $(XRT); pwd | awk -F/ '{ print $$NF }')
endif
ifeq ($(RCS_VERSION),)
	an error here indicates RCS_VERSION was not set
endif
RCS_CO_FLAGS = -r$(RCS_VERSION)
RCS_CI_FLAGS = -N$(RCS_VERSION)
RCS_DIFF_FLAGS = $(RCS_CO_FLAGS)

endif


ABSOLUTE_XRT = $(shell cd $(XRT); pwd)
MAKE_INCLUDE = $(ABSOLUTE_XRT)/makefiles

PROTDIR = $(XRT)/protocols
protDIR = $(PROTDIR)
PLATDIR = $(XRT)/$(XPLATFORM)
pxkDIR = $(PLATDIR)
PIDIR = $(XRT)/pi
piDIR = $(PIDIR)
USERDIR = $(XRT)/$(XPLATFORM)/user
userDIR = $(USERDIR)
LIBS = protocols $(XPLATFORM) pi
# Some compilers make require that all libraries have the extension .a
# You will need to change these definitions to add the extension.
LIBPROT = $(PROTDIR)/libProt_$(HOW) 
LIBPXK =  $(PLATDIR)/libPxk_$(HOW)
LIBPI = $(PIDIR)/libPi_$(HOW)
LIBUSER = $(XRT)/$(XPLATFORM)/user/libUser_$(HOW)


# Order is important in XLIBS -- LIBPI should come after LIBPXK to give
# the platform-specific code the opportunity to override the default
# implementations in libPi.
#
XLIBS = $(LIBPROT) $(LIBPXK) $(LIBPI)

CLEAN_OBJ =	\
	${PCDOTOS} \
	${PRIVOBJ} \
	$(HOW)/traceLevels.o \
	$(HOW)/protocols.o   \
	$(HOW)/protTbl.o 

OBJ = 	${CLEAN_OBJ} \
	${LIB_OBJ} \

SRC =	\
	${PCDOTCS} \
	${PRIVSRC} \
	traceLevels.c \
	protocols.c \
	protTbl.c

xall:	libs all

obj:
#	@echo $(PRIVOBJ)
#	@echo $(notdir $(PRIVOBJ))
#	@echo $(addprefix %/, $(notdir $(PRIVOBJ)))
#	@echo Filter:
#	@echo $(filter $(addprefix %/, $(notdir $(PRIVOBJ))), $(OBJ))
#	@echo Filter out:
#	@echo $(filter-out $(addprefix %/, $(notdir $(PRIVOBJ))), $(OBJ))
#	@echo Objects:
	@echo $(OBJ)

compose: graph.comp
	compose $(COMPOSEFLAGS) < graph.comp
	@if [ -s ./protocols.sed ] ; then \
		cp -p Makefile Makefile.bak ; \
		$(SED) -f protocols.sed <Makefile | $(SED) -e '/^@/s/^/	/' >Maketemp ; \
		cp Maketemp Makefile ; \
		rm Maketemp protocols.sed ; \
	else  \
		true ; \
	fi

setup:	alldotodirs
	if [ ! -r ./graph.comp ] ; then \
		cp $(XRT)/build/Template/graph.comp.$(XPLATFORM) ./graph.comp ; \
		chmod +w graph.comp ; \
	fi


.PHONY: Compose

libCompose: allCompose
alldepend: allDepend
allclean: allClean
allcompose: allCompose
	
allDepend allClean allCompose: all%: pi% prot% pxk%

depend: localdepend
dotodirs: localdotodirs

clean:	cleanjunk
	@echo Removing dotos ...
	@echo $(CLEAN_OBJ)
	@rm -f $(CLEAN_OBJ)

cleanjunk:
	@echo Removing dotss ...
	@rm -f  *.c2 *.ccom *.cpp *.bak *.ckp *.ss all.* cscope.dep \
	    cscope.out cscope.tsort routines.sizes routines.list \
	    allnames.dep ${ASM}

.PHONY: system
system: allCompose allDepend libs

include $(MAKE_INCLUDE)/Makefile.local



#-----------------------------------------------------------------------
#			  xkernel libraries
#-----------------------------------------------------------------------
#
# forcing rules
#
.PHONY: libs libProt libPxk libPi
libs: libPi libProt libPxk 

prot libProt:
	cd $(PROTDIR); $(MAKE) 
pxk libPxk:
	cd $(PLATDIR); $(MAKE) 
pi libPi:
	cd $(PIDIR); $(MAKE)

user libUser:
	cd $(USERDIR); $(MAKE)

#
# non-forcing rules
#
$(LIBPROT):
	make libProt
$(LIBPXK):
	make libPxk
$(LIBPI):
	make libPi

$(LIBUSER):
	make libUser

protDepend pxkDepend piDepend userDepend: %Depend: 
	cd $($*DIR); $(MAKE) TOP_LEV_DIR=$(notdir $($*DIR)) depend

protClean pxkClean piClean userClean: %Clean: 
	cd $($*DIR); $(MAKE) TOP_LEV_DIR=$(notdir $($*DIR)) clean

protCompose pxkCompose piCompose userCompose: %Compose: 
	cd $($*DIR); $(MAKE) TOP_LEV_DIR=$(notdir $($*DIR)) compose

#-----------------------------------------------------------------------
#			Source and Header list
#-----------------------------------------------------------------------
#
# lists of all source and header files in both the local directory 
# and the libraries
#
# non-forcing rules
#
hdrList: 
	@echo rebuilding header list
	@make hdrlist
srcList: 
	@echo rebuilding source list
	@make srclist
#
# forcing rules
#
.PHONY: srclist hdrlist
srclist:
	@make SRCLIST OBJECTFILE:=srcList

hdrlist:
	@make HDRLIST OBJECTFILE:=hdrList

SRCLIST HDRLIST:
	@make local$@ ;						\
	for lib in $(LIBS) ; do					\
	 	( cd $(XRT)/$$lib ; 				\
	 	  $(MAKE) $@ OBJECTFILE:=$@.$$$$ ;		\
		) ;						\
		cat $(XRT)/$$lib/$@.$$$$ |			\
			fixRelPaths $$lib | 			\
			fixRelPathsDown 2 >> $(OBJECTFILE) ;	\
		rm -f $(XRT)/$$lib/$@.$$$$ ;			\
	done ;							\
	sort -u $(OBJECTFILE) > $(OBJECTFILE).$$$$	;	\
	mv $(OBJECTFILE).$$$$ $(OBJECTFILE)		
 
SRC OBJ:
	@make local$@ ;						\
	for lib in $(LIBS) ; do					\
	 	( cd $(XRT)/$$lib ; 				\
	 	  $(MAKE) $@  ;					\
		) ;						\
	done ;							\
	true

#-----------------------------------------------------------------------
#			 RCS related targets
#-----------------------------------------------------------------------
#
# ciList -- list of files which require checking in
#
ciList:	srcList hdrList
	@for file in `make ciFilter` ; do \
	    if [ -w $$file ] ; then \
 	        rcsdiff $(RCS_DIFF_FLAGS) $$file > /dev/null 2>&1 || echo $$file ; \
	    fi ; \
	done ; true


#
# ci -- check in (unlocked) all source and header files which have changed
#
ci:	srcList hdrList
	@for file in `make ciList` ; do 			\
 		echo $$file ; ci -q -u $(RCS_CI_FLAGS) $$file ; 	\
	done ; true

#
# ci2 -- like 'ci', but lists file differences before checking in
#
ci2:	srcList hdrList
	@for file in `make ciList` ; do 			\
		rcsdiff $(RCS_DIFF_FLAGS) $$file ; 		\
		echo $$file ; 					\
		ci -q -u $(RCS_CI_FLAGS) $$file ; 		\
	done ; true
	
#
# ciAuto -- like 'ci', but doesn't prompt for a message, using CI_MSG instead.
#
ciAuto:	srcList hdrList
	@for file in `make ciList` ; do 			\
 		echo $$file ; 					\
		ci -q -u $(RCS_CI_FLAGS) -m"$(CI_MSG)" $$file ; 	\
	done ; true

ciFilter:	
	@for file in `cat srcList hdrList | egrep -v \
		'^/|localinit\.c|protocols\.c|protocols\.h|protTbl\.c|traceLevels\.c|^tst/|/site\.h'` ; do \
	    XX=`echo $$XX $$file` ; \
	done ; \
	echo $$XX 


#-----------------------------------------------------------------------
#				 tags
#-----------------------------------------------------------------------
#
# creates an emacs tag file for all xkernel source and header files
# (including libraries)
#
.PHONY: tags
tags:	srcList hdrList
	make TAGS ALLSRC="`cat srcList hdrList | tr '\012' ' '`"

TAGS:	$(ALLSRC)
	@etags -tw -f TAGS $(ALLSRC)



#-----------------------------------------------------------------------
#				 grep
#-----------------------------------------------------------------------
#
# greps for the target G in all xkernel source and header files
# example usage:  make grep G="x_create"
#
G = xkernel
GREP = egrep
GFLAGS=

grep:	srcList hdrList
	-@$(GREP) -n $(GFLAGS) -e "$G" `cat srcList` `cat hdrList`


#-----------------------------------------------------------------------

rcsVers:
	echo $(RCS_VERSION)

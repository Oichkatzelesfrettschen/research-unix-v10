Mk: a successor to make	g
/dev/tty	c
Variables	s
Metarules	s
Rules with no prerequisites	s
Rules with multiple targets	s
Aggregates
Targets without recipes	s
Recipe Execution	s
Parallel processing	s
Missing intermediates	s
Administrative	s
Quoting	s
Getting Fancy	s
Namelists
Dependencies on variables
Deleting targets on errors	s
builtin variables	s
Nontemporal dependencies
Quick hacks	s
Segmented mkfiles	r
Dynamic mkfiles	r
Differences between \f4make\fP and \f4mk\fP	Z
Conversion between \f4make\fP and \f4mk\fP	Z
Availability of \f4mk\fP	q
Principles	s
C program
conditional shell construct
dependency graph
file names
header file
initial value	s
multiple targets	s
object files	s
parallel execution
regular expression
regular expression metarules
shell script
shell variables
time stamp
transitive closure
virtual targets	s
yacc	C
I make	c
lex	C
$NPROC	S
$target	S
% metarules	p
&&	S
 -d	S
 -dg	S
 -e	S
 -g	S
 -i	S
 -n	S
 -S	p
 -u	S
 -w	S
 -p	S
: separator	p
BUILTINS	S
CC variable	f
CFLAGS	c
D attribute	p
ENVIRON 	c
 N attribute	p
NPROC	S
NREP	S
P attribute	p
Q attribute	p
R attribute	p
ar command	f
awk 	c
membername	c
mkconv	c
mkfile	c
newprereq	c
prereq 	c
regexp	c
/dev/tty	S
$prereq	S
default variable definitions	s
alltarget	S
newprereq	S
pid	S
stem	S
~system









	C::g() { f(); }
	class A { public: f(); };
	class B : public virtual A {};
	class C : public A { g(); };
	main() { }
	static f();
> 
> A more general rule: every inline function must be defined in
> A suggested rule of thumb: every inline member function must
> be defined in the header file that carries the corresponding
> class declaration.
> every file that declares it.
Both 2.0 and 2.1 accepts this:
From: bs
Pretty draconian.  By analogy, the same thing should be true
Should cfront be brought into line with the manual or should the manual
To: C++ language issues mailing list
be brought into line with cfront? In the former case, do we break code?
calling the A::f() in the non-virtual base.
class directly or indirectly derived from it (or words to that effect).
in the latter, how?
of static functions.  This trivial program would then be wrong:
yet the manual states that a virtual class is an immediate base of ever

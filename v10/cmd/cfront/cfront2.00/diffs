1c1
< /*ident	"@(#)ctrans:src/expr2.c	1.1.5.29" */
---
> /*ident	"@(#)ctrans:src/expr2.c	1.1.5.28" */
1c1
< /*ident	"@(#)ctrans:src/cfront.h	1.2.5.21" */
---
> /*ident	"@(#)ctrans:src/cfront.h	1.2.5.20" */
693a694
> // LC:  last cycle
1c1
< /*ident	"@(#)ctrans:src/expr3.c	1.3.5.30" */
---
> /*ident	"@(#)ctrans:src/expr3.c	1.3.5.29" */
1c1
< /*ident	"@(#)ctrans:src/main.c	1.6.7.37" */
---
> /*ident	"@(#)ctrans:src/main.c	1.6.7.36" */
155c155
< // modification for local classes defined within inline functions
---
> // LC:  modification for local classes defined within inline functions
179c179
< // modification for local classes defined within inline functions
---
> // LC:  modification for local classes defined within inline functions
1c1
< /*ident	"@(#)ctrans:src/dcl.c	1.3.5.30" */
---
> /*ident	"@(#)ctrans:src/dcl.c	1.3.5.29" */
1c1
< /*ident	"@(#)ctrans:src/find.c	1.1.5.23" */
---
> /*ident	"@(#)ctrans:src/find.c	1.1.5.22" */
27,28c27,28
< MPMACRO	= PATCH
< MPFILE	= patch
---
> MPMACRO	= MUNCH
> MPFILE	= munch
1c1
< /*ident	"@(#)ctrans:src/dcl2.c	1.3.4.22" */
---
> /*ident	"@(#)ctrans:src/dcl2.c	1.3.4.21" */
824a825,835
> // optimization misses in the case
> //     int i;
> //     {
> //         i = 0;
> //         int j; // non_trivial == 0
> //     }
> //     int j; // oops: both j's are entered in same table
> //     
> //     test of lex_level seems to handle this ...
> //
> //		&& n->tp->base!=FCT && n->tp->base!=OVERLOAD)
1c1
< /*ident	"@(#)ctrans:src/simpl.c	1.5.4.24" */
---
> /*ident	"@(#)ctrans:src/simpl.c	1.5.4.23" */
1c1
< /*ident	"@(#)ctrans:src/dcl3.c	1.6.5.29" */
---
> /*ident	"@(#)ctrans:src/dcl3.c	1.6.5.28" */
1c1
< /*ident	"@(#)ctrans:src/expr.c	1.1.5.31" */
---
> /*ident	"@(#)ctrans:src/expr.c	1.1.5.30" */
1c1
< /*ident	"@(#)ctrans:src/simpl2.c	1.2.6.33" */
---
> /*ident	"@(#)ctrans:src/simpl2.c	1.2.6.32" */

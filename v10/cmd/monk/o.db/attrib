


























|attribute(page.offset; init 0;
$ [
.po$
.nrO \n(.o
.nrO0 \n(.o
])

|attribute(line.length; init 6i;
$ [
.ll$
.lt$
.nrW \n(.lu
])

|attribute(page.length; init 11i;
$ [
.pl$
])

|attribute(spacing; init off;
on [
.rs
]	off [
.ns
])

|attribute(new.page; nostack;
[
.bp
]	odd [
.bp
.af;P \gP
.afP 1
.nr;P \nP
.afP \g(;P
.af;P 1
.if!\n(;P%2 \{\
.rs
.bp\}
.rr;P
]	even [
.bp
.af;P \gP
.afP 1
.nr;P \nP
.afP \g(;P
.af;P 1
.if\n(;P%2 \{\
.rs
.bp\}
.rr;P
])

|attribute(line.spacing; stack, init 1;
$ [
.ls$
])

|attribute(blank.lines; nostack;
$ [
.sp$
.ti\n(.iu
]	[
.sp1
.ti\n(.iu
])

|attribute(minimum.lines; nostack;
$ [
.br
.ie!'\n(.z'' \{\
.if!'\n(.z'\*(}D' .rr :D :E
.nr;4 $v
.if!(\n(.d=\n(:D) .nr :E 0
.nr;4 -\n(:Eu
.if\n(;4 \{\
.sp\n(;4u
.nr:E +\n(;4u \}
.rm;4
.ds}D \n(.z
.nr:D \n(.d \}
.el\{\
.rr:D :E
.nr;4 $v
.if!(\n(nl=\n(:N) .nr :B 0
.nr;4 -\n(:Bu
.if\n(;4 \{\
.sp\n(;4u
.nr:B +\n(;4u \}
.rm;4
.nr:N \n(nl \}
.ti\n(.iu
]	[
.br
.ie!'\n(.z'' \{\
.if!'\n(.z'\*(}D' .rr :D :E
.nr;4 1v
.if!(\n(.d=\n(:D) .nr :E 0
.nr;4 -\n(:Eu
.if\n(;4 \{\
.sp\n(;4u
.nr:E +\n(;4u \}
.rm;4
.ds}D \n(.z
.nr:D \n(.d \}
.el\{\
.rr:D :E
.nr;4 1v
.if!(\n(nl=\n(:N) .nr :B 0
.nr;4 -\n(:Bu
.if\n(;4 \{\
.sp\n(;4u
.nr:B +\n(;4u \}
.rm;4
.nr:N \n(nl \}
.ti\n(.iu
])

|attribute(horizontal.motion; nostack;
$ [\h'$']
number $$. [\h'\n$$.']
number $number.register [\h'\n($number.register'])

|attribute(vertical.motion; nostack;
$ [\v'$']
number $$. [\v'\n$$.']
number $number.register [\v'\n($number.register'])

|attribute(concatenate; nostack;
[\&\c
])

|attribute(new.line; nostack;
[
.br
])

|attribute(indent; stack, default 0;
$ [
.in$
])

|attribute(indent.line; nostack;
$ [
.ti$
]
number $$. [
.ti\n$$.u
]
number $number.register [
.ti\n($number.registeru
])

|attribute(fill; stack, init on;
on [
'fi
]	off [
'nf
])

|attribute(adjust; stack, init both;
right [
.adr
]	left [
.adl
]	both [
.adb
]	on [
.ad
]	off [
.na
])

|attribute(title; nostack;
$left $center $right [
.tl\(ts$left\(ts$center\(ts$right\(ts
]	$$. [
.tl\*$$.
]	$$.. [
.tl\*($$..
]	$ [
.tl$
])

|attribute(center; stack, default off;
on [
.ce9999
]	off [
.ce0
])

|attribute(center.block; stack, default off;
on [
.nr:Y 0
.br
.di:1
]	off [
.br
.di
.nr;q \n(.u
.nf
.nr;L \n(.L
.ls1
.nr;i \n(.i
.if\n(dl>\n(:Y .nr :Y \n(dl
.if\n(:Y<\n(.l .in (\n(.lu-\n(:Yu)/2u
.:1
.if\n(;q .fi
.ls\n(;L
.in\n(;iu
.rr;L ;i ;q
.rm:1
])

|attribute(text; nostack;
$ [$]
roman $ [\f1\&$\fP\&]
italics $ [\f2\&$\fP\&]
bold $ [\f3\&$\fP\&]
bolditalics $ [\f4\&$\fP\&]
cw $ [\f(CW\&$\fP\&])

|attribute(error; nostack;
number $* $$. [
.tm"__FILE__":__LINE__: $* \n$$.
]	number $* $number.register [
.tm"__FILE__":__LINE__: $* \n($number.register
]	string $* $$. [
.tm"__FILE__":__LINE__: $* \n$$.
]	string $* $string.register [
.tm"__FILE__":__LINE__: $* \n($string.register
]	$* [
.tm"__FILE__":__LINE__: $*
])

|attribute(here; stack, default off;
on [
.if\n(:y .tm "__FILE__":__LINE__: Here's and/or Around's can not be nested
.nr:y 1
.br
.di:0
]	off [
.br
.di
.nr:d 1
.if(\n(dn>=\n(.t)&((\n(dn<(\n(.p-\n(:r-\n(:m)):\
(\n(nl>(\n(.p-\n(:r-\n(:o/2u+\n(:r)))\
.ne\n(.tu+1v
.nr;q \n(.u
.nf
.nr;L \n(.L
.ls1
.nr;i \n(.i
.in0
.rs
.:0
.nr:d 0
.if\n(;q .fi
.ls\n(;L
.in\n(;iu
.nr:y 0
.rr;L ;i ;q
.rm:0
])

|attribute(around; stack, default off;
on [
.if\n(:y .tm "__FILE__":__LINE__: Here's and/or Around's can not be nested
.nr:y 1
.nr;s \n(.s
.nr;f \n(.f
.nr;u \n(.u
.nr;j \n(.j
.nr;v \n(.v
.nr;L \n(.L
.nr;l \n(.l
.nr;i \n(.i
.ev1
.ps\n(;s
.vs\n(;sp+2p
.ft\n(;f
.nf
.if\n(;u .fi
.ad\n(;j
.vs\n(;vu
.ls\n(;L
.ll\n(;lu
.in\n(;iu
.ti\n(;iu
.hy14
.lt\n(;lu
|ifvalue around_width full [
.if\n(:C \{\
.ll\n(W0u
.lt\n(W0u \}
]
.di:0
]	off [
.br
.di
|ifvalue around_width full [
.if\n(:C \{\
.ll\nWu
.lt\nWu \}
]
.ev
.nr:z \n(:z%26+1
.if\n(:z-\n(:w=0 .tm "__FILE__":__LINE__: too many floating displays
.af;w a
.nr;w \n(:z
.rn:0 ?\n(;w
.nr!\n(;w 0
|ifvalue around_width full [
.nr!\n(;w 1
]
|ifnotvalue around_width full [
.if!\n(:C .nr !\n(;w 1
]
.nr|\n(;w \n(dn
.if(((\n(:z-\n(:w=1):(\n(:z+26-\n(:w=1))&((\n(!\n(;w=1)&(\n(:C<2))&\
((\n(dn<\n(.t):((\n(dn>(\n(.p-\n(:r-\n(:m))&\
(\n(nl<=(\n(.p-\n(:r-\n(:o/2u+\n(:r))))) .)z
.nr:y 0
.rr;L ;f ;i ;j ;l ;s ;u ;v ;w
])

|attribute(around_placement; nostack;
[
.)w
])

|attribute(footnote; stack, default off;
on [
.if\n(:x .tm "__FILE__":__LINE__: Footnotes can not be nested
.nr:x 1
.nr;s \n(.s
.nr;f \n(.f
.nr;u \n(.u
.nr;j \n(.j
.nr;v \n(.v
.nr;L \n(.L
.nr;l \n(.l
.ev1
.ps\n(;s
.vs\n(;sp+2p
.ft\n(;f
.nf
.if\n(;u .fi
.ad\n(;j
.vs\n(;vu
.ls\n(;L
.ll\n(;lu
.in0
.ti0
.hy14
.lt\n(;lu
|ifvalue footnote_width full [
.if\n(:C \{\
.ll\n(W0u
.lt\n(W0u \}
]
.da:F
.ie!\n(:q \{\
.nr;o \n(.o
.po0
.ps10
.vs12p
.ft1
.ie\n(.A=0 \l'72p'
.el __________
.ft
.vs
.ps
.po\n(;ou \}
.el.sp 1
]	off [
.br
.da
|ifvalue footnote_width full [
.if\n(:C \{\
.ll\nWu
.lt\nWu \}
.nr:v 1
]
|ifnotvalue footnote_width full [
.if!\n(:C .nr :v 1
]
.ev
.nr:x 0
.if!\n(:o-\n(:m \{\
.nr:o +\n(:Vu-1u
.nrdn +\n(:V-\n(.v \}
.nr:q +\n(dnu
.nr:o +\n(dnu
.if!\n(.pu-\n(nlu-.5p-\n(:ou .nr :o \n(.pu-\n(nlu-.5p
.if!\n(:ou-\n(:mu .nr :o \n(:mu
.if\n(:C>1&\n(:v .nr :o \n(:mu
.ch)f -\n(:ou
.rr;L ;f ;j ;l ;o ;s ;u ;v
])

|attribute(size; stack, default 10;
$ [|ifvalue inline on [\s$\&]|ifvalue inline off [
.ps$
]])

|attribute(space; stack, init 12;
$ [
.vs$
])

|attribute(SPACE; nostack;
[
.vs\n(.sp+2p
])

|attribute(font; stack, default roman;
roman [|ifvalue inline on [\&\f1\&]|ifvalue inline off [
.ft1
]]	italics [|ifvalue inline on [\&\f2\&]|ifvalue inline off [
.ft2
]]	bold [|ifvalue inline on [\&\f3\&]|ifvalue inline off [
.ft3
]]	bolditalics [|ifvalue inline on [\&\f4\&]|ifvalue inline off [
.ft4
]]	cw [|ifvalue inline on [\&\f(CW\&]|ifvalue inline off [
.ftCW
]])

|attribute(font.family; stack, default times;
times [
.fp1 R
.fp2 I
.fp3 B
.fp4 BI
]	palatino [
.fp1 PA
.fp2 PI
.fp3 PB
.fp4 PX
]	bembo [
.fp1 B1
.fp2 B2
.fp3 B3
.fp4 B4
]	optima [
.fp1 O1
.fp2 O2
.fp3 O3
.fp4 O4
]	souvenir [
.fp1 SV
.fp2 SI
.fp3 SB
.fp4 SX
]	helvetica [
.fp1 H
.fp2 HI
.fp3 HB
.fp4 HX
]	cw [
.fp1 CW
.fp2 I
.fp3 B
.fp4 BI
]	gothic [
.fp1 C
.fp2 CX
.fp3 TB
.fp4 TX
]	condensed [
.fp1 Hcond
.fp2 HcondI
.fp3 HcondB
.fp4 HlightI
]	narrow [
.fp1 Hr
.fp2 Hi
.fp3 Hb
.fp4 Hx
])

|attribute(if; nostack;
$test [
.if$test \
]	begin $test [
.if$test \{\
]	end [\}\c
]	else $test [
.ie$test \
]	else begin $test [
.ie$test \{\
]	else [
.el\
]	else begin [
.el\{\
])

|attribute(tab; nostack;
[\&	])

|attribute(leader; nostack;
[\&])

|attribute(thick.line; nostack;
$ [
.ps24
\l'$'
.ps
]	[
.ps24
\l'\n(.lu'
.ps
])

|attribute(line; nostack;
$ [\l'$']
[\l'\n(.lu'])

|attribute(box; nostack;
x [\s12\o'\(mu\(sq'\s0]
empty [\s12\(sq\s0]
[\(sq])

|attribute(underline; stack, default off;
on [\kx]
off [\l'|\nxu\(ul'])

|attribute(hyphenate; stack, init on;
on [
.hy14
]	off [
.nh
])

|attribute(case; stack, init any;
upper [
]	lower [
]	capitalize [
]	any [
])

|attribute(tab.stops; nostack;
$* [
.ta$*
]	[
.ta.5i 1.0i 1.5i 2.0i 2.5i 3.0i 3.5i 4.0i 4.5i 5.0i 5.5i 6.0i 6.5i 7.0i 7.5i
])

|attribute(set; nostack;
$* $number [
|for i in $* {
.nr$i $number
}]	string $* $string [
|for i in $* {
.ds$i $string
}])

|attribute(store; nostack;
$* $$. [
|for i in $* {
.nr$i \n$$.
}]	$* $number.register [
|for i in $* {
.nr$i \n($number.register
}]	string $* $$. [
|for i in $* {
.ds$i \*$$.
}]	string $* $string.register [
|for i in $* {
.ds$i \*($string.register
}]	number.from.string $* $$. [
|for i in $* {
.nr$i \*$$.
}]	number.from.string $* $string.register [
|for i in $* {
.nr$i \*($string.register
}]	string.from.number $* $$. [
|for i in $* {
.ds$i \n$$.
}]	string.from.number $* $number.register [
|for i in $* {
.ds$i \n($number.register
}]	width $* $$. [
|for i in $* {
.nr$i \w'\*$$.'
}]	width $* $number.register [
|for i in $* {
.nr$i \w'\*($number.register'
}]	indent $* [
|for i in $* {
.nr$i \n(.i
}]	linelength $* [
|for i in $* {
.nr$i \n(.l
}]	pagewidth $* [
|for i in $* {
.nr$i \nWu
}]	totrap $* [
|for i in $* {
.nr$i \n(.t
}]	pageoffset $* [
|for i in $* {
.nr$i \n(.o
}]	diversionheight $* [
|for i in $* {
.nr$i \n(dn
}])

|attribute(clear; nostack;
$* [
|for i in $* {
.nr$i 0
}]	string $* [
.rm$*
])

|attribute(rename; nostack;
$from $to [
.rn$from $to
])

|attribute(add; nostack;
$result $$. $* [
.nr$result \n$$.
|for i in $* {
.nr$result +\n($i
}]	$result $operand $* [
.nr$result \n($operand
|for i in $* {
.nr$result +\n($i
}]	$result $$. [
.nr$result +\n$$.
]	$result $operand [
.nr$result +\n($operand
]	constant $result $constant $* [
.nr$result $constant
|for i in $* {
.nr$result +$i
}]	constant $result $constant [
.nr$result +$constant
]	string $string $text [
.as$string $text
]	string.from.number $string $$. [
.as$string \n$$.
]	string.from.number $string $number.register [
.as$string \n($number.register
]	string.from.string $string $$. [
.as$string \*$$.
]	string.from.string $string $string.register [
.as$string \*($string.register
])

|attribute(sub; nostack;
$result $$. $* [
.nr$result \n$$.
|for i in $* {
.nr$result -\n($i
}]	$result $operand $* [
.nr$result \n($operand
|for i in $* {
.nr$result -\n($i
}]	$result $$. [
.nr$result -\n$$.
]	$result $operand [
.nr$result -\n($operand
]	constant $result $constant $* [
.nr$result $constant
|for i in $* {
.nr$result -$i
}]	constant $result $constant [
.nr$result -$constant
])

|attribute(incr; nostack;
$* [
|for i in $* {
.nr$i +1
}])

|attribute(decr; nostack;
$* [
|for i in $* {
.nr$i -1
}])

|attribute(protect; nostack;
$ [
.ne$
]	[
.ne3
])

|attribute(warn.orphan; nostack;
$ [
]	[
])

|attribute(column; nostack;
$column $width $offset [
.if\n(:c<$column .nr :c $column
.nrW$column $width
.nrO$column $offset
]	width $width [
.nrW\n(:c $width
]	offset $offset [
.nrO\n(:c $offset
]	next [
.nr:c +1
]	clear	[
.rr:c
]	new [
.ie!\n(:C .tm "__FILE__":__LINE__: not in multi-column mode
.el\{\
.br
.ne\n(.tu+1v \}
]	new $ [
.ie!\n(:C .tm "__FILE__":__LINE__: not in multi-column mode
.el\{\
.br
.ne\n(.tu+1v
.nr;d \n(.lu-\n(W\n(:Cu
.nr:C $
.nrO \n(O$u
.po\nOu
.nrW \n(W$u+\n(;du
.ll\nWu
.lt\nWu
.rr;d \}
]	old $ [
.ie!\n(:C .tm "__FILE__":__LINE__: not in multi-column mode
.el\{\
.br
.if\n(nl>\n(U\n(:C \
.mkU\n(:C
.nr;d \n(.lu-\n(W\n(:Cu
.nr:C $
.nrO \n(O$u
.po\nOu
.nrW \n(W$u+\n(;du
.ll\nWu
.lt\nWu
.rs
.ie\n(U$ .sp |\n(U$u
.el.sp |\n(U0u
.ns
.rr;d \}
]	on [
.ie\n(:C .tm "__FILE__":__LINE__: already in multi-column mode
.el\{\
.br
.nr:C 1
.nrW \n(W1u
.ll\nWu
.lt\nWu
.nrO \n(O1u
.po\nOu
.mkU0
.ns
.rrU1 U2 U3 U4 U5 U6 U7 U8 U9
.rr;d \}
]	off [
.ie!\n(:C .tm "__FILE__":__LINE__: already in full page mode
.el\{\
.br
.if\n(nl>\n(U\n(:C \
.mkU\n(:C
.nr;d \n(.lu-\n(W\n(:Cu
.nr:C 0
.nrO \n(O0u
.po\nOu
.nrW \n(W0u+\n(;du
.ll\nWu
.lt\nWu
.rs
.sp|\n(U0u
.if\n(nl<\n(U1 \
.sp|\n(U1u
.if\n(nl<\n(U2 \
.sp|\n(U2u
.if\n(nl<\n(U3 \
.sp|\n(U3u
.if\n(nl<\n(U4 \
.sp|\n(U4u
.if\n(nl<\n(U5 \
.sp|\n(U5u
.if\n(nl<\n(U6 \
.sp|\n(U6u
.if\n(nl<\n(U7 \
.sp|\n(U7u
.if\n(nl<\n(U8 \
.sp|\n(U8u
.if\n(nl<\n(U9 \
.sp|\n(U9u
.ti\n(.iu
.rrU1 U2 U3 U4 U5 U6 U7 U8 U9
.ns
.rr;d \}
]	2 [
.ie\n(:C .tm "__FILE__":__LINE__: already in multi-column mode
.el\{\
.br
.nr:C 1
.nrW0 \nW
.nrW \n(.lu*8u/17u
.nrW1 \nW
.nrW2 \nW
.nrO0 \n(.ou
.nrO1 \n(.ou
.nrO2 \n(.lu*9u/17u+\n(.ou
.ll\nWu
.lt\nWu
.nr:c 2
.mkU0
.ns
.rrU1 U2 \}
])

|attribute(divert.string; stack, default off;
$string.name [
.ds$string.name ]
off [
])

|attribute(divert.number; stack, default off;
$number.name [
.nr$number.name ]
off [
])

|attribute(divert.output; stack, default off;
on $string.name [
.nr;s \n(.s
.nr;f \n(.f
.nr;u \n(.u
.nr;j \n(.j
.nr;v \n(.v
.nr;L \n(.L
.nr;l \n(.l
.ev1
.ps\n(;s
.vs\n(;sp+2p
.ft\n(;f
.nf
.if\n(;u .fi
.ad\n(;j
.vs\n(;vu
.ls\n(;L
.ll\n(;lu
.in0
.ti0
.hy14
.lt\n(;lu
.di$string.name
]	off [
.br
.di
.ev
.rr;L ;f ;j ;l ;o ;s ;u ;v
])

|attribute(divert.input; stack, default off;
on $string.name [
.eo
.de$string.name\(ts\(ts
]	off [
.\(ts\(ts
.ec
])

|attribute(append.output; stack, default off;
on $string.name [
.nr;s \n(.s
.nr;f \n(.f
.nr;u \n(.u
.nr;j \n(.j
.nr;v \n(.v
.nr;L \n(.L
.nr;l \n(.l
.ev1
.ps\n(;s
.vs\n(;sp+2p
.ft\n(;f
.nf
.if\n(;u .fi
.ad\n(;j
.vs\n(;vu
.ls\n(;L
.ll\n(;lu
.in0
.ti0
.hy14
.lt\n(;lu
.da$string.name
]	off [
.br
.da
.ev
.rr;L ;f ;j ;l ;o ;s ;u ;v
])

|attribute(append.input; stack, default off;
on $string.name [
.eo
.am$string.name\(ts\(ts
]	off [
.\(ts\(ts
.ec
])

|attribute(invoke; nostack;
on $offset $what  [
.wh15i $what
.ch$what \n(nlu+$offset
]	on number $$. $what  [
.wh15i $what
.ch$what \n(nlu+\n$$.u
]	on number $number.register $what  [
.wh15i $what
.ch$what \(nlu+\n($number.registeru
]	at constant $constant $what [
.wh15i $what
.ch$what $constant
]	at number $$. $what [
.wh15i $what
.ch$what \n$$.u
]	at number $number.register $what [
.wh15i $what
.ch$what \n($number.registeru
]	end [
.br
.di
]	off $what [
.ch$what
])

|attribute(remember; nostack;
$ [
.mk$
])

|attribute(return; nostack;
$$. [
.sp|\n$$.u
.ti\n(.iu
]	$ [
.sp|\n($u
.ti\n(.iu
])

|attribute(goto; nostack;
$ [
.sp|$
.ti\n(.iu
])

|attribute(string; nostack;
$$. [\*$$.]
$string.register [\*($string.register]
roman $$. [\f1\&\*$$.\fP\&]
italics $$. [\f2\&\*$$.\fP\&]
bold $$. [\f3\&\*$$.\fP\&]
bolditalics $$. [\f4\&\*$$.\fP\&]
cw $$. [\f(CW\&\*$$.\fP\&]
roman $string.register [\f1\&\*($string.register\fP\&]
italics $string.register [\f2\&\*($string.register\fP\&]
bold $string.register [\f3\&\*($string.register\fP\&]
bolditalics $string.register [\f4\&\*($string.register\fP\&]
cw $string.register [\f(CW\&\*($string.register\fP\&])

|attribute(macro; nostack;
$ [
.$
])

|attribute(number; nostack;
$$. [\n$$.]
$number.register [\n($number.register]
++ $$. [\n+$$.]
++ $number.register [\n+($number.register]
format $* $format [
|for i in $* {
.af$i $format
}]
incr $* $incr [
|for i in $* {
.nr$i +0 $incr
}]
format.from.string $* $$. [
|for i in $* {
.af$i \*$$.
}]
incr $* $incr [
|for i in $* {
.nr$i +0 $incr
}]
format.from.string $* $format [
|for i in $* {
.af$i \*($format
}]
incr $* $incr [
|for i in $* {
.nr$i +0 $incr
}])

|attribute(list.pre; stack, default;
[
.rml2
]
$pre [
.dsl2 $pre
])

|attribute(list.format; stack, default;
[
.rml3
]
$format [
.dsl3 $format
])

|attribute(list.post; stack, default;
[
.rml4
]
$post [
.dsl4 $post
])

|attribute(list.indent; stack, default;
[
.rml5
]
$indent [
.dsl5 $indent
])

|attribute(list; nostack;
off [
.)C ;i l1 \*(l1
.in\n(;iu
.)C l0 l0 \*(l0
.rm;i
]	on [
.dsl1 \n(.i \*(l1
.in+\w'\*(l5'u
.afl0 0
.dsl0 \n(l0 \*(l0
.nrl0 0 1
])

|attribute(file.information; nostack;
[
.lf__LINE__ __FILE__
])

|attribute(reference.style; nostack;
acm [|reference_style(acm)
]	apa [|reference_style(apa)
]	att [|reference_style(att)
]	ieee [|reference_style(ieee)
]	lsa [|reference_style(lsa)
]	pami [|reference_style(pami)
]	spectrum [|reference_style(spectrum)
])

|attribute(reference.option; nostack;
tm [|reference_style(same tm)
]	rp [|reference_style(same rp)
]	nroff [|reference_style(same nroff)
]	troff [|reference_style(same troff)
]	sort [|reference_style(same sort)
]	sequence [|reference_style(same sequence)
]	a [|reference_style(same a)
]	d [|reference_style(same d)
]	t [|reference_style(same t)
]	ad [|reference_style(same ad)
]	at [|reference_style(same at)
]	da [|reference_style(same da)
]	dt [|reference_style(same dt)
]	ta [|reference_style(same ta)
]	td [|reference_style(same td)
]	adt [|reference_style(same adt)
]	atd [|reference_style(same atd)
]	dat [|reference_style(same dat)
]	dta [|reference_style(same dta)
]	tad [|reference_style(same tad)
]	tda [|reference_style(same tda)
])

|attribute(reference; stack, default off;
database [|reference_database<]
[|reference_include<]
list [|reference_list<]
on [|reference<]
off [>])

|attribute(reference.placement; nostack;
[|reference_placement
])

|attribute(table; stack, default off;
on [
.TS
]	off [
.TE
])

|attribute(ipa; stack, default off;
on [@ipa(]
off [)])

|attribute(picture; stack, default off;
on [
.PS
]	off [
.PE
])

|attribute(ped; stack, default off;
on [
.GS
]	off[
.GE
])

|attribute(ideal; stack, default off;
on [
.IS
]	off[
.IE
])

|attribute(equation; stack, default off;
on [
.br
.di:4
.EQ
]	off [
.EN
.br
.di
.rm:4
|ifvalue center.block on [
.if\w@\*(10\*(ES@ \{\
.if\n(:Y<\w@\*(10@ .nr :Y \w@\*(10@
\!\*(10\h'\\n(.lu-\w@\*(10\*(ES@u-\\n(.iu'\*(ES
.rr:D :E \}]
|ifvalue center on [
.if\w@\*(10\*(ES@ .tl \(ts\(ts\*(10\(ts\*(ES\(ts]
|ifnotvalue center.block on [ |ifnotvalue center on [
.if\w@\*(10\*(ES@ \{\
.pc
.tl\(ts\h'\n(.iu'\*(10\(ts\(ts\*(ES\(ts
.pc% \}]]
.rm10
])

|attribute(inline.equation; stack, default off;
on []
off [])

|attribute(graph; stack, default off;
on [
.G1
]	off [
.G2
])

|attribute(bargraph; stack, default off;
on [
.B1
]	off [
.B0
])

|attribute(computeroutput; stack, default off;
on [
.CW
]	off [
.CN
])

|attribute(citation; nostack;
save on [
.CD "]
save off string $$. [" "\*$$."
]	save off string $string.register [" "\*($string.register"
]	save off number $$. [" "\n$$."
]	save off number $number.register [" "\n($number.register"
]	save string $name $$. [\&\c
.CD "$name" "\*$$."
]	save string $name $string.register [\&\c
.CD "$name" "\*($string.register"
]	save number $name $$. [\&\c
.CD "$name" "\n$$."
]	save number $name $number.register [\&\c
.CD "$name" "\n($number.register"
]	remember on [\&\c
.CU "]
remember off ["]
remember string $name [\&\c
.CU "$name"])

|attribute(index; stack, default off;
on [\&\c
.tmix: ]
off [	\nP
\&])

|attribute(contents; nostack;
$category $level $sequence $text [
.tm.TC	$category	$level	\*($sequence	\*($text	\nP
])

|attribute(white.text; nostack;
$text [|ifvalue verbatim off []|ifvalue verbatim on [$text]])

|attribute(nl.paragraph; nostack;
[|ifvalue verbatim on [
]|ifvalue verbatim off []])

|attribute(format.type; stack, init none;
model [
.dsf0 model
]	acm [
.dsf0 acm
]	none [
.dsf0 none
])

|attribute(list.type; stack, default none;
fixed []
calculated []
none [])

|attribute(list.spacing; stack, default off;
off []
on [])

|attribute(verbatim; stack, default off;
off []
on [])

|attribute(draft; stack, default off;
off []
on [])

|attribute(sectioning; stack, default bysection;
bysection []
bychapter []
byappendix [])

|attribute(globalparagraph.style; stack, default flushed;
indented []
numbered []
flushed [])

|attribute(localparagraph.style; stack, default flushed;
indented []
numbered []
flushed [])

|attribute(inline; stack, default on;
off []
on [])

|attribute(footnote_width; stack, default normal;
narrow []
full []
normal[])

|attribute(around_width; stack, default normal;
narrow []
full []
normal[])

|attribute(sawreference; stack, default off;
off []
on [])

|attribute(sawabstract; stack, default off;
off []
on [])

|attribute(sawkeywords; stack, default off;
off []
on [])

|attribute(sawoverflow; stack, default off;
off []
on [])

|attribute(sawtitlebox; stack, default off;
off []
on [])

|attribute(sawendnote; stack, default off;
off []
on [])

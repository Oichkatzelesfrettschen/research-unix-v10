.text
.globl _main
_main:.word 0x0
subl2 $80,sp
moval -4(fp),r1
movl $0,r2
movl r2,(r1)
moval _next,r1
movl $1,r2
movl r2,(r1)
jbr L3
L2:moval -24(fp),r1
movl r1,0(sp)
moval -4(fp),r1
movl r1,4(sp)
moval _lookup,r1
calls $0,(r1); movl r0,r1
movl $2,r2
ashl r2,r1,r1
moval _count,r2
addl3 r2,r1,r1
movl (r1),r2
movl $1,r3
addl3 r3,r2,r2
movl r2,(r1)
L3:moval -24(fp),r1
movl r1,0(sp)
moval _getword,r1
calls $0,(r1); movl r0,r1
movl $0,r2
cmpl r1,r2; jneq L2
L4:moval -4(fp),r1
movl (r1),r1
movl r1,0(sp)
moval _tprint,r1
calls $0,(r1)
movl $0,r1
movl r1,r0
L1:ret
.globl _err
_err:.word 0x0
subl2 $56,sp
moval _6,r1
movl r1,0(sp)
moval 4(ap),r1
movl (r1),r1
movl r1,4(sp)
moval _printf,r1
calls $0,(r1)
movl $1,r1
movl r1,0(sp)
moval _exit,r1
calls $0,(r1)
L5:ret
.globl _getword
_getword:.word 0x0
subl2 $60,sp
L8:L9:moval _getchar,r1
calls $0,(r1); movl r0,r1
moval -8(fp),r2
movl r1,(r2)
movl $-1,r2
cmpl r1,r2; jeql L11
moval -8(fp),r1
movl (r1),r1
movl r1,0(sp)
moval _isletter,r1
calls $0,(r1); movl r0,r1
movl $0,r2
cmpl r1,r2; jeql L8
L11:L10:moval -4(fp),r1
moval 4(ap),r2
movl (r2),r2
movl r2,(r1)
jbr L15
L12:moval -4(fp),r1
movl (r1),r2
movl $1,r3
addl3 r3,r2,r3
movl r3,(r1)
moval -8(fp),r1
movl (r1),r1
cvtlb r1,r1
movb r1,(r2)
L13:moval _getchar,r1
calls $0,(r1); movl r0,r1
moval -8(fp),r2
movl r1,(r2)
L15:moval -8(fp),r1
movl (r1),r2
movl r2,0(sp)
moval _isletter,r2
movl r1,-52(fp)
calls $0,(r2); movl r0,r2
movl -52(fp),r1
movl r2,(r1)
movl $0,r1
cmpl r2,r1; jneq L12
L14:moval -4(fp),r1
movl (r1),r1
movl $0,r2
movb r2,(r1)
moval -4(fp),r1
movl (r1),r1
movl r1,r1
moval 4(ap),r2
movl (r2),r2
movl r2,r2
cmpl r1,r2; jlequ L17
movl $1,r1
movl r1,r0
jbr L7
L17:movl $0,r1
movl r1,r0
L7:ret
.globl _isletter
_isletter:.word 0x0
subl2 $48,sp
moval 4(ap),r1
moval 4(ap),r2
movl (r2),r2
movl r2,(r1)
moval 4(ap),r1
movl (r1),r1
movl $65,r2
cmpl r1,r2; jlss L20
movl $90,r2
cmpl r1,r2; jgtr L20
moval 4(ap),r1
movl (r1),r2
movl $32,r3
addl3 r3,r2,r2
movl r2,(r1)
L20:moval 4(ap),r1
movl (r1),r1
movl $97,r2
cmpl r1,r2; jlss L22
movl $122,r2
cmpl r1,r2; jgtr L22
moval 4(ap),r1
movl (r1),r1
movl r1,r0
jbr L19
L22:movl $0,r1
movl r1,r0
L19:ret
.globl _lookup
_lookup:.word 0x0
subl2 $60,sp
moval 8(ap),r1
moval 8(ap),r2
movl (r2),r2
movl r2,(r1)
moval 8(ap),r1
movl (r1),r1
movl (r1),r1
movl $0,r2
cmpl r1,r2; jeql L25
moval 4(ap),r1
movl (r1),r1
movl r1,0(sp)
moval 8(ap),r1
movl (r1),r1
movl (r1),r1
movl $2,r2
ashl r2,r1,r1
moval _words,r2
addl3 r2,r1,r1
movl (r1),r1
movl r1,4(sp)
moval _strcmp,r1
calls $0,(r1); movl r0,r1
moval -4(fp),r2
movl r1,(r2)
moval -4(fp),r1
movl (r1),r1
movl $0,r2
cmpl r1,r2; jgeq L27
moval 4(ap),r1
movl (r1),r1
movl r1,0(sp)
moval 8(ap),r1
movl (r1),r1
movl (r1),r1
movl $2,r2
ashl r2,r1,r1
moval _left,r2
addl3 r2,r1,r1
movl r1,4(sp)
moval _lookup,r1
calls $0,(r1); movl r0,r1
movl r1,r0
jbr L24
L27:moval -4(fp),r1
movl (r1),r1
movl $0,r2
cmpl r1,r2; jleq L29
moval 4(ap),r1
movl (r1),r1
movl r1,0(sp)
moval 8(ap),r1
movl (r1),r1
movl (r1),r1
movl $2,r2
ashl r2,r1,r1
moval _right,r2
addl3 r2,r1,r1
movl r1,4(sp)
moval _lookup,r1
calls $0,(r1); movl r0,r1
movl r1,r0
jbr L24
L29:moval 8(ap),r1
movl (r1),r1
movl (r1),r1
movl r1,r0
jbr L24
L30:L28:L25:moval _next,r1
movl (r1),r1
movl $2000,r2
cmpl r1,r2; jlss L31
moval _33,r1
movl r1,0(sp)
moval _err,r1
calls $0,(r1)
L31:moval _next,r1
movl (r1),r1
movl $2,r2
ashl r2,r1,r1
moval _right,r2
addl3 r2,r1,r2
movl $0,r3
movl r3,(r2)
moval _left,r2
addl3 r2,r1,r2
movl r3,(r2)
moval _count,r2
addl3 r2,r1,r1
movl r3,(r1)
moval 4(ap),r1
movl (r1),r1
movl r1,0(sp)
moval _strlen,r1
calls $0,(r1); movl r0,r1
movl $1,r2
addl3 r2,r1,r1
movl r1,0(sp)
moval _malloc,r1
calls $0,(r1); movl r0,r1
moval _next,r2
movl (r2),r2
movl $2,r3
ashl r3,r2,r2
moval _words,r3
addl3 r3,r2,r2
movl r1,(r2)
moval _next,r1
movl (r1),r1
movl $2,r2
ashl r2,r1,r1
moval _words,r2
addl3 r2,r1,r1
movl (r1),r1
movl r1,r1
movl $0,r2
cmpl r1,r2; jnequ L34
moval _36,r1
movl r1,0(sp)
moval _err,r1
calls $0,(r1)
L34:moval _next,r1
movl (r1),r1
movl $2,r2
ashl r2,r1,r1
moval _words,r2
addl3 r2,r1,r1
movl (r1),r1
movl r1,0(sp)
moval 4(ap),r1
movl (r1),r1
movl r1,4(sp)
moval _strcpy,r1
calls $0,(r1)
moval _next,r1
movl (r1),r2
movl $1,r3
addl3 r3,r2,r3
movl r3,(r1)
moval 8(ap),r1
movl (r1),r1
movl r2,(r1)
movl r2,r0
L24:ret
.globl _tprint
_tprint:.word 0x0
subl2 $60,sp
moval 4(ap),r1
moval 4(ap),r2
movl (r2),r2
movl r2,(r1)
moval 4(ap),r1
movl (r1),r1
movl $0,r2
cmpl r1,r2; jeql L39
moval 4(ap),r1
movl (r1),r1
movl $2,r2
ashl r2,r1,r1
moval _left,r2
addl3 r2,r1,r1
movl (r1),r1
movl r1,0(sp)
moval _tprint,r1
calls $0,(r1)
moval _41,r1
movl r1,0(sp)
moval 4(ap),r1
movl (r1),r1
movl $2,r2
ashl r2,r1,r1
moval _count,r2
addl3 r2,r1,r2
movl (r2),r2
movl r2,4(sp)
moval _words,r2
addl3 r2,r1,r1
movl (r1),r1
movl r1,8(sp)
moval _printf,r1
calls $0,(r1)
moval 4(ap),r1
movl (r1),r1
movl $2,r2
ashl r2,r1,r1
moval _right,r2
addl3 r2,r1,r1
movl (r1),r1
movl r1,0(sp)
moval _tprint,r1
calls $0,(r1)
L39:L38:ret
.globl _strcmp
_strcmp:.word 0x0
subl2 $48,sp
moval 4(ap),r1
moval 4(ap),r2
movl (r2),r2
movl r2,(r1)
moval 8(ap),r1
moval 8(ap),r2
movl (r2),r2
movl r2,(r1)
jbr L44
L43:moval 4(ap),r1
movl (r1),r2
movl $1,r3
addl3 r3,r2,r3
movl r3,(r1)
movb (r2),r1
cvtbl r1,r1
movl $0,r2
cmpl r1,r2; jneq L46
movl $0,r1
movl r1,r0
jbr L42
L46:moval 8(ap),r1
movl (r1),r2
movl $1,r3
addl3 r3,r2,r2
movl r2,(r1)
L44:moval 4(ap),r1
movl (r1),r1
movb (r1),r1
cvtbl r1,r1
moval 8(ap),r2
movl (r2),r2
movb (r2),r2
cvtbl r2,r2
cmpl r1,r2; jeql L43
L45:moval 4(ap),r1
movl (r1),r1
movb (r1),r1
cvtbl r1,r1
movl $0,r2
cmpl r1,r2; jneq L49
movl $-1,r1
movl r1,r0
jbr L42
L49:moval 8(ap),r1
movl (r1),r1
movb (r1),r1
cvtbl r1,r1
movl $0,r2
cmpl r1,r2; jneq L51
movl $1,r1
movl r1,r0
jbr L42
L51:L50:moval 4(ap),r1
movl (r1),r1
movb (r1),r1
cvtbl r1,r1
moval 8(ap),r2
movl (r2),r2
movb (r2),r2
cvtbl r2,r2
subl3 r2,r1,r1
movl r1,r0
L42:ret
.text
_41:.ascii "%d\011%s\012\000"
_36:.ascii "out of word storage\000"
_33:.ascii "out of node storage\000"
_6:.ascii "? %s\012\000"
.data
.globl _next
.align 2; _next:.space 4
.globl _words
.align 2; _words:.space 8000
.globl _right
.align 2; _right:.space 8000
.globl _left
.align 2; _left:.space 8000
.globl _count
.align 2; _count:.space 8000
#import _strcpy
#import _strlen
#import _malloc
#import _getchar
#import _exit
#import _printf
#end

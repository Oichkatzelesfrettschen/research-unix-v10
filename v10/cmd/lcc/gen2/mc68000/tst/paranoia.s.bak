.data
.globl _Zero
.align 2; _Zero:long 0x0,0x0
.globl _Half
.align 2; _Half:long 0x3fe00000,0x0
.globl _One
.align 2; _One:long 0x3ff00000,0x0
.globl _Two
.align 2; _Two:long 0x40000000,0x0
.globl _Three
.align 2; _Three:long 0x40080000,0x0
.globl _Four
.align 2; _Four:long 0x40100000,0x0
.globl _Five
.align 2; _Five:long 0x40140000,0x0
.globl _Eight
.align 2; _Eight:long 0x40200000,0x0
.globl _Nine
.align 2; _Nine:long 0x40220000,0x0
.globl _TwentySeven
.align 2; _TwentySeven:long 0x403b0000,0x0
.globl _ThirtyTwo
.align 2; _ThirtyTwo:long 0x40400000,0x0
.globl _TwoForty
.align 2; _TwoForty:long 0x406e0000,0x0
.globl _MinusOne
.align 2; _MinusOne:long 0xbff00000,0x0
.globl _OneAndHalf
.align 2; _OneAndHalf:long 0x3ff80000,0x0
.globl _NoTrials
.align 2; _NoTrials:long 20
.text
.globl _sigfpe
.align 2
_sigfpe:link a6,#-0
unlk a6
rts
.data
.align 2; _758:.long _759
.long _760
.long _761
.long _762
.text
.globl _main
.align 2
_main:link a6,#-0
unlk a6
rts
.globl _Sign
.align 2
_Sign:link a6,#-0
fmoved fp0,-(sp); movl (sp)+,d0; movl sp@+,d1
unlk a6
rts
.globl _Pause
.align 2
_Pause:link a6,#-0
unlk a6
rts
.globl _TstCond
.align 2
_TstCond:link a6,#-0
unlk a6
rts
.data
.align 2; _834:.long _835
.long _836
.long _837
.long _838
.text
.globl _BadCond
.align 2
_BadCond:link a6,#-4
movm.l #0x80,-4(a6)
movm.l -4(a6),#0x80
unlk a6
rts
.globl _Random
.align 2
_Random:link a6,#-0
fmoved fp0,-(sp); movl (sp)+,d0; movl sp@+,d1
unlk a6
rts
.globl _SqXMinX
.align 2
_SqXMinX:link a6,#-0
unlk a6
rts
.globl _NewD
.align 2
_NewD:link a6,#-0
unlk a6
rts
.globl _SR3750
.align 2
_SR3750:link a6,#-0
unlk a6
rts
.globl _IsYeqX
.align 2
_IsYeqX:link a6,#-0
unlk a6
rts
.globl _SR3980
.align 2
_SR3980:link a6,#-0
unlk a6
rts
.globl _PrintIfNPositive
.align 2
_PrintIfNPositive:link a6,#-0
unlk a6
rts
.globl _TstPtUf
.align 2
_TstPtUf:link a6,#-0
unlk a6
rts
.globl _notify
.align 2
_notify:link a6,#-0
unlk a6
rts
.globl _msglist
.align 2
_msglist:link a6,#-4
movm.l #0x2000,-4(a6)
movm.l -4(a6),#0x2000
unlk a6
rts
.data
.align 2; _937:.long _938
.long _939
.long _940
.long _941
.long _942
.long _943
.long _944
.long _945
.long _946
long 0x0
.text
.globl _Instructions
.align 2
_Instructions:link a6,#-0
unlk a6
rts
.data
.align 2; _948:.long _949
.long _950
.long _951
.long _952
.long _953
.long _954
.long _955
.long _956
.long _957
.long _958
.long _959
.long _960
.long _961
.long _962
long 0x0
.text
.globl _Heading
.align 2
_Heading:link a6,#-0
unlk a6
rts
.data
.align 2; _964:.long _965
.long _966
.long _967
.long _968
.long _969
.long _970
.long _971
.long _972
.long _973
.long _974
.long _975
.long _976
.long _977
.long _978
.long _979
.long _980
.long _981
.long _982
.long _983
long 0x0
.text
.globl _Characteristics
.align 2
_Characteristics:link a6,#-0
unlk a6
rts
.data
.align 2; _985:.long _986
.long _987
.long _988
.long _989
.long _990
.long _991
.long _992
.long _993
.long _994
.long _995
.long _996
.long _997
.long _998
.long _999
.long _1000
.long _1001
.long _1002
long 0x0
.text
.globl _History
.align 2
_History:link a6,#-0
unlk a6
rts
.globl _pow
.align 2
_pow:link a6,#-24
fmovemx #0x3,a6@(-24)
fmoved fp0,-(sp); movl (sp)+,d0; movl sp@+,d1
fmovemx a6@(-24),#0x3
unlk a6
rts
.bss
.globl _UfNGrad
comm _UfNGrad,4
.globl _SqRWrng
comm _SqRWrng,4
.globl _IEEE
comm _IEEE,4
.globl _Anomaly
comm _Anomaly,4
.globl _Monot
comm _Monot,4
.globl _NotMonot
comm _NotMonot,4
.globl _Done
comm _Done,4
.globl _Break
comm _Break,4
.globl _RSqrt
comm _RSqrt,4
.globl _RAddSub
comm _RAddSub,4
.globl _RDiv
comm _RDiv,4
.globl _RMult
comm _RMult,4
.globl _GAddSub
comm _GAddSub,4
.globl _GDiv
comm _GDiv,4
.globl _GMult
comm _GMult,4
.globl _N1
comm _N1,4
.globl _N
comm _N,4
.globl _M
comm _M,4
.globl _PageNo
comm _PageNo,4
.globl _Milestone
comm _Milestone,4
.globl _fpecount
comm _fpecount,4
.globl _ErrCnt
comm _ErrCnt,16
.globl _Z9
comm _Z9,8
.globl _Z2
comm _Z2,8
.globl _Z1
comm _Z1,8
.globl _PseudoZero
comm _PseudoZero,8
.globl _Z
comm _Z,8
.globl _Random2
comm _Random2,8
.globl _Y2
comm _Y2,8
.globl _Y1
comm _Y1,8
.globl _Y
comm _Y,8
.globl _Random1
comm _Random1,8
.globl _X8
comm _X8,8
.globl _X2
comm _X2,8
.globl _X1
comm _X1,8
.globl _X
comm _X,8
.globl _W
comm _W,8
.globl _V9
comm _V9,8
.globl _V0
comm _V0,8
.globl _V
comm _V,8
.globl _U2
comm _U2,8
.globl _U1
comm _U1,8
.globl _UfThold
comm _UfThold,8
.globl _OneUlp
comm _OneUlp,8
.globl _S
comm _S,8
.globl _Underflow
comm _Underflow,8
.globl _T
comm _T,8
.globl _Random9
comm _Random9,8
.globl _R
comm _R,8
.globl _Q9
comm _Q9,8
.globl _Q
comm _Q,8
.globl _Precision
comm _Precision,8
.globl _MyZero
comm _MyZero,8
.globl _J
comm _J,8
.globl _StickyBit
comm _StickyBit,8
.globl _I
comm _I,4
.globl _HInvrse
comm _HInvrse,8
.globl _H
comm _H,8
.globl _F9
comm _F9,8
.globl _F6
comm _F6,8
.globl _Third
comm _Third,8
.globl _E9
comm _E9,8
.globl _MaxSqEr
comm _MaxSqEr,8
.globl _SqEr
comm _SqEr,8
.globl _MinSqEr
comm _MinSqEr,8
.globl _E3
comm _E3,8
.globl _Exp2
comm _Exp2,8
.globl _E1
comm _E1,8
.globl _E0
comm _E0,8
.globl _FourD
comm _FourD,8
.globl _D
comm _D,8
.globl _CInvrse
comm _CInvrse,8
.globl _C
comm _C,8
.globl _A1
comm _A1,8
.globl _AInvrse
comm _AInvrse,8
.globl _ch
comm _ch,8
.globl _Indx
comm _Indx,4
.globl _BMinusU2
comm _BMinusU2,8
.globl _RadixD2
comm _RadixD2,8
.globl _BInvrse
comm _BInvrse,8
.globl _Radix
comm _Radix,8
.globl _sigsave
comm _sigsave,4
.globl _ovfl_buf
comm _ovfl_buf,4
.globl _jmp_buf
comm _jmp_buf,4
.text
.align 2; _1028:long 0x40000000,0x0
.align 2; _1027:long 0x3fe00000,0x0
.align 2; _1010:long 0x40913000,0x0
.align 2; _1009:long 0xc0913000,0x0
.align 2; _1002:.ascii "see source comments for more history.\000"
.align 2; _1001:.ascii "BASIC version of this program (C) 1983 by Prof. W. M. Kahan;\000"
.align 2; _1000:.ascii "as used by certain early WANG machines.\012\000"
.align 2; _999:.ascii "floating-point numbers, but also allows logarithmic encoding\000"
.align 2; _998:.ascii "\012The program is based upon a conventional radix representatio"
.ascii "n for\000"
.align 2; _997:.ascii "of pathologies, and to say how well the arithmetic is implemente"
.ascii "d.\000"
.align 2; _996:.ascii "of the arithmetic, this program tries to cope with a wider varie"
.ascii "ty\000"
.align 2; _995:.ascii "the Radix, Precision and range (over/underflow thresholds)\000"
.align 2; _994:.ascii "W. J. Cody and W. Waite. Although both programs try to discover\000"
.align 2; _993:.ascii "book  `Software Manual for the Elementary Functions' (1980) by\000"
.align 2; _992:.ascii "program called `MACHAR', which can be found at the end of the\000"
.align 2; _991:.ascii "The diagnostic capabilities of this program go beyond an earlier"
.ascii "\000"
.align 2; _990:.ascii "Failures may confound subsequent diagnoses.\012\000"
.align 2; _989:.ascii "   FAILUREs, like 2+2 == 5 .\000"
.align 2; _988:.ascii "   Serious DEFECTs, like lack of a guard digit, and\000"
.align 2; _987:.ascii "   FLAWs, like lack of a sticky bit,\000"
.align 2; _986:.ascii "The program attempts to discriminate among\000"
.align 2; _983:.ascii "     Decimal-Binary conversion is NOT YET tested for accuracy.\000"
.align 2; _982:.ascii "     Extra-precise subexpressions are revealed but NOT YET teste"
.ascii "d.\000"
.align 2; _981:.ascii "     Sqrt is tested.  Y^X is not tested.\000"
.align 2; _980:.ascii "\011and for contamination with pseudo-zeros.\000"
.align 2; _979:.ascii "     Comparisions are checked for consistency with subtraction\000"
.align 2; _978:.ascii "     V0  tells, roughly, whether  Infinity  is represented.\000"
.align 2; _977:.ascii "     V = an overflow threshold, roughly.\000"
.align 2; _976:.ascii "     E0 and PseudoZero tell whether underflow is abrupt, gradual"
.ascii ", or fuzzy.\000"
.align 2; _975:.ascii "     UnderflowThreshold = an underflow threshold.\000"
.align 2; _974:.ascii "     Whether a Sticky Bit used correctly for rounding.\000"
.align 2; _973:.ascii "\011for Mult., Div., Add/Subt. and Sqrt.\000"
.align 2; _972:.ascii "     Whether arithmetic is chopped, correctly rounded, or someth"
.ascii "ing else\000"
.align 2; _971:.ascii "     Adequacy of guard digits for Mult., Div. and Subt.\000"
.align 2; _970:.ascii "     U1 = 1/Radix^Precision = One Ulp of numbers a little less t"
.ascii "han 1.0 .\000"
.align 2; _969:.ascii "\011(OneUlpnit in the Last Place) of 1.000xxx .\000"
.align 2; _968:.ascii "     U2 = Radix/Radix^Precision = One Ulp\000"
.align 2; _967:.ascii "     Precision = number of significant digits carried.\000"
.align 2; _966:.ascii "     Radix = 1, 2, 4, 8, 10, 16, 100, 256 ...\000"
.align 2; _965:.ascii "Running this program should reveal these characteristics:\000"
.align 2; _962:.ascii "\011Other relevant compiler options:\000"
.align 2; _961:.ascii "\011Optimization level:\012\000"
.align 2; _960:.ascii "\011Compiler:\012\000"
.align 2; _959:.ascii "\011Computer:\012\000"
.align 2; _958:.ascii "\011Version:\01110 February 1989;\000"
.align 2; _957:.ascii "\011Precision:\011double;\000"
.align 2; _956:.ascii "In doing so, please include the following information:\000"
.align 2; _955:.ascii "\011San Francisco, CA 94143-0704, USA\012\000"
.align 2; _954:.ascii "\011University of California\000"
.align 2; _953:.ascii "\011Computer Center U-76\000"
.align 2; _952:.ascii "\011Richard Karpinski\000"
.align 2; _951:.ascii "Please send suggestions and interesting results to\000"
.align 2; _950:.ascii "cope with unanticipated and newly uncovered arithmetic pathologi"
.ascii "es.\012\000"
.align 2; _949:.ascii "Users are invited to help debug and augment this program so it w"
.ascii "ill\000"
.align 2; _946:.ascii "Answer questions with Y, y, N or n (unless otherwise indicated)."
.ascii "\012\000"
.align 2; _945:.ascii "amend it to make further progress.\012\000"
.align 2; _944:.ascii "program anyway to see how many milestones it passes, and then\000"
.align 2; _943:.ascii "warning.  If persuasion avails naught, don't despair but run thi"
.ascii "s\000"
.align 2; _942:.ascii "to persevere with a surrogate value after, perhaps, displaying s"
.ascii "ome\000"
.align 2; _941:.ascii "error like Over/Underflow or Division by Zero occurs, but rather"
.ascii "\000"
.align 2; _940:.ascii "try to persuade the computer NOT to terminate execution when an\000"
.align 2; _939:.ascii "    `END OF TEST',\012\000"
.align 2; _938:.ascii "Lest this program stop prematurely, i.e. before displaying\012\000"
.align 2; _935:.byte 37,115,10,0
.align 2; _930:.ascii "   PLEASE NOTIFY KARPINKSI!\012\000"
.align 2; _929:.ascii "%s test appears to be inconsistent...\012\000"
.align 2; _927:.ascii "\011differs from Z * 1 = %.17e\012\000"
.align 2; _926:.ascii "\011Comparison alleges that 1 * Z = %.17e\012\000"
.align 2; _925:.ascii "Multiplication does not commute!\012\000"
.align 2; _920:.ascii "Z / 1 = %.17e\012\000"
.align 2; _917:.ascii "1 * Z == %g\012\000"
.align 2; _914:.ascii "Z * 1 = %.17e \000"
.align 2; _911:.ascii "%.17e\012\011compares different from  \000"
.align 2; _910:.ascii "What prints as Z = \000"
.align 2; _905:.ascii "This is a DEFECT!\012\000"
.align 2; _902:.ascii "This is a VERY SERIOUS DEFECT!\012\000"
.align 2; _896:.ascii " has NOT just been signaled.\012\000"
.align 2; _895:.ascii "This is O.K., provided Over/Underflow\000"
.align 2; _892:.ascii "What the machine gets for (Z + Z) / Z is  %.17e .\012\000"
.align 2; _888:.ascii "(Z + Z) / Z should be safe.\012\000"
.align 2; _887:.ascii "Since comparison denies Z = 0, evaluating \000"
.align 2; _883:.ascii "Similar discrepancies have occurred %d times.\012\000"
.align 2; _873:.ascii "\011\011they differ by %.17e .\012\000"
.align 2; _872:.ascii "\011which compared unequal to correct %.17e ;\012\000"
.align 2; _871:.ascii "\011yielded %.17e;\012\000"
.align 2; _870:.ascii "\011(%.17e) ^ (%.17e)\012\000"
.align 2; _869:.ascii "computing\012\000"
.align 2; _868:.ascii "WARNING:  computing\012\000"
.align 2; _850:.ascii "\011instead of correct value 0 .\012\000"
.align 2; _849:.ascii "sqrt( %.17e) - %.17e  = %.17e\012\000"
.align 2; _841:long 0x3ed4f8b5,0x88e368f0
.align 2; _839:.ascii "%s:  %s\000"
.align 2; _838:.ascii "FLAW\000"
.align 2; _837:.ascii "DEFECT\000"
.align 2; _836:.ascii "SERIOUS DEFECT\000"
.align 2; _835:.ascii "FAILURE\000"
.align 2; _829:.ascii "          Page: %d\012\012\000"
.align 2; _828:.ascii "\012Diagnosis resumes after milestone Number %d\000"
.align 2; _826:long 0xbff00000,0x0
.align 2; _821:.ascii "END OF TEST.\012\000"
.align 2; _820:.ascii "\012A total of %d floating point exceptions were registered.\012"
.ascii "\000"
.align 2; _817:.ascii "The arithmetic diagnosed appears to be Excellent!\012\000"
.align 2; _816:.ascii " during Gradual Underflow.\012\000"
.align 2; _815:.ascii ",\012except for possibly Double Rounding\000"
.align 2; _814:.byte 46,10,0
.align 2; _811:.ascii "854\000"
.align 2; _810:.ascii "754\000"
.align 2; _807:.ascii "the proposed IEEE standard P\000"
.align 2; _806:.ascii "Rounding appears to conform to \000"
.align 2; _803:.ascii "The arithmetic diagnosed seems Satisfactory.\012\000"
.align 2; _797:.ascii "No failures, defects nor flaws have been discovered.\012\000"
.align 2; _796:.ascii " program's subsequent diagnoses.\012\000"
.align 2; _795:.ascii "Potentially fatal FAILURE may have spoiled this\000"
.align 2; _792:.ascii "unacceptable Serious Defects.\012\000"
.align 2; _791:.ascii "The arithmetic diagnosed has \000"
.align 2; _787:.ascii "despite inconvenient Defects.\012\000"
.align 2; _786:.ascii "The arithmetic diagnosed may be Acceptable\012\000"
.align 2; _781:.ascii "Satisfactory though flawed.\012\000"
.align 2; _780:.ascii "The arithmetic diagnosed seems \000"
.align 2; _769:.ascii "The number of  %-29s %d.\012\000"
.align 2; _762:.ascii "FLAWs  discovered =\000"
.align 2; _761:.ascii "DEFECTs  discovered =\000"
.align 2; _760:.ascii "SERIOUS DEFECTs  discovered =\000"
.align 2; _759:.ascii "FAILUREs  encountered =\000"
.align 2; _755:.ascii "\012    Trying to compute 0 / 0 produces ...\000"
.align 2; _754:.ascii "  %.7e .\012\000"
.align 2; _751:.ascii "    Trying to compute 1 / 0 produces ...\000"
.align 2; _750:.ascii "What message and/or values does Division by Zero produce?\012\000"
.align 2; _749:.ascii "  instead, X / X - 1/2 - 1/2 = %.17e .\012\000"
.align 2; _748:.ascii "  X / X differs from 1 when X = %.17e\012\000"
.align 2; _743:.ascii "  X / X  traps when X = %g\012\000"
.align 2; _727:.ascii "is too far from 1.\012\000"
.align 2; _726:.ascii " unbalanced range; UfThold * V = %.17e\012\011%s\012\000"
.align 2; _725:.ascii "Badly\000"
.align 2; _718:.ascii " is too far from sqrt(Z) ^ 2 (%.17e) .\012\000"
.align 2; _717:.ascii "Comparison alleges that Z = %17e\012\000"
.align 2; _705:.ascii " is too far from sqrt(Z) ^ 2 = %.17e .\012\000"
.align 2; _704:.ascii "Comparison alleges that what prints as Z = %.17e\012\000"
.align 2; _687:.ascii "+-%g, +-%g\012and +-%g are confused by Overflow.\000"
.align 2; _686:.ascii "Comparisons involving \000"
.align 2; _680:.ascii "above is a DEFECT.\012\000"
.align 2; _679:.ascii "Any overflow signal separating this * from the one\012\000"
.align 2; _678:.ascii "                           nor for V / 1 = %.17e .\012\000"
.align 2; _677:.ascii "No Overflow should be signaled for V * 1 = %.17e\012\000"
.align 2; _676:.ascii "There is no saturation value because the system traps on overflo"
.ascii "w.\012\000"
.align 2; _675:.ascii "Overflow saturates at V0 = %.17e .\012\000"
.align 2; _672:.ascii "Overflow threshold is V  = %.17e .\012\000"
.align 2; _663:.ascii "overflow past %.17e\012\011shrinks to %.17e .\012\000"
.align 2; _660:.ascii "-(-Y) differs from Y.\012\000"
.align 2; _659:.ascii "finds a \000"
.align 2; _658:.ascii "Seems O.K.\012\000"
.align 2; _655:.ascii "Trying it on Y = %.17e .\012\000"
.align 2; _654:.ascii "Can `Z = -Y' overflow?\012\000"
.align 2; _647:.ascii "This may generate an error.\012\000"
.align 2; _646:.ascii "Searching for Overflow threshold:\012\000"
.align 2; _645:.ascii " ... no discrepancies found.\012\000"
.align 2; _637:.ascii "Testing powers Z^Q at four nearly extreme values.\012\000"
.align 2; _636:.ascii "Accuracy seems adequate.\012\000"
.align 2; _629:.ascii "\011calculations involving tiny interest rates.\012\000"
.align 2; _628:.ascii "\011This much error may spoil financial\012\000"
.align 2; _627:.ascii "\011differs from correct value by %.17e .\012\000"
.align 2; _626:.ascii "\011(1 + (%.17e) ^ (%.17e);\012\000"
.align 2; _625:.ascii " %.17e for\012\000"
.align 2; _624:.ascii "Calculated\000"
.align 2; _617:.ascii "Testing X^((X + 1) / (X - 1)) vs. exp(2) = %.17e as X -> 1.\012\000"
.align 2; _613:.ascii "This computed value is O.K.\012\000"
.align 2; _610:.ascii "   threshold = %.17e .\012\000"
.align 2; _609:.ascii "this is not between 0 and underflow\012\000"
.align 2; _605:.ascii "actually calculating yields: %.17e .\012\000"
.align 2; _604:.ascii "should afflict the expression\012\011(%.17e) ^ (%.17e);\012\000"
.align 2; _603:.ascii "UfThold = (%.17e) ^ (%.17e)\012only underflow \000"
.align 2; _602:.ascii "Since underflow occurs below the threshold\012\000"
.align 2; _601:.ascii "Range is too narrow; U1^%d Underflows.\012\000"
.align 2; _596:.ascii "merely roundoff.\012\000"
.align 2; _595:.ascii "calculation may suffer larger Relative error than \000"
.align 2; _594:.ascii " below which\000"
.align 2; _593:.ascii "The Underflow threshold is %.17e, %s\012\000"
.align 2; _592:.ascii "X / Z = 1 + %g .\012\000"
.align 2; _591:.ascii "X / Z fails!\012\000"
.align 2; _588:.ascii "encounter Division by Zero although actually\012\000"
.align 2; _587:.ascii "  ... (f(X) - f(Z)) / (X - Z) ...\012\000"
.align 2; _586:.ascii "    if (X == Z)  ...  else\000"
.align 2; _585:.ascii "confusion when innocent statements like\012\000"
.align 2; _584:.ascii "this is a SERIOUS DEFECT\012that causes \000"
.align 2; _583:.ascii "    Should this NOT signal Underflow, \000"
.align 2; _582:.ascii "yet X - Z yields %.17e .\012\000"
.align 2; _581:.ascii "X = %.17e\012\011is not equal to Z = %.17e .\012\000"
.align 2; _576:.ascii "Underflow / UfThold failed!\012\000"
.align 2; _565:.ascii "(roundoff in UfThold) < E0.\012\000"
.align 2; _564:.ascii "Underflow is gradual; it incurs Absolute Error =\012\000"
.align 2; _559:.ascii "|Q - Y| = %.17e .\012\000"
.align 2; _558:.ascii "print out as Q = %.17e, Y = %.17e .\012\000"
.align 2; _557:.ascii "Q == Y while denying that |Q - Y| == 0; these values\012\000"
.align 2; _556:.ascii "Underflow confuses Comparison, which alleges that\012\000"
.align 2; _554:.ascii " or else multiplication gets too many last digits wrong.\012\000"
.align 2; _553:.ascii " coming down from %.17e\012\000"
.align 2; _552:.ascii "approach a threshold = %.17e\012\000"
.align 2; _551:.ascii "Either accuracy deteriorates as numbers\012\000"
.align 2; _539:.ascii "Smallest strictly positive number found is E0 = %g .\012\000"
.align 2; _538:.ascii " threshold than products.\012\000"
.align 2; _537:.ascii "Difference underflows at a higher\000"
.align 2; _534:.ascii " threshold than differences.\012\000"
.align 2; _533:.ascii "Products underflow at a higher\000"
.align 2; _526:.ascii "value PseudoZero that prints out as %g .\012\000"
.align 2; _525:.ascii "Underflow can stick at an allegedly positive\012\000"
.align 2; _524:.ascii "positive, isn't; it prints out as  %g .\012\000"
.align 2; _523:.ascii "But -PseudoZero, which should be\012\000"
.align 2; _520:.ascii "PseudoZero that prints out as: %g .\012\000"
.align 2; _519:.ascii "allegedly negative value\012\000"
.align 2; _518:.ascii "Positive expressions can underflow to an\012\000"
.align 2; _505:.ascii "multiplication gets too many last digits wrong.\012\000"
.align 2; _481:.ascii "Seeking Underflow thresholds UfThold and E0.\012\000"
.align 2; _478:.ascii "... no discrepancis found.\012\000"
.align 2; _475:.ascii "\011involving interest rates.\012\000"
.align 2; _474:.ascii "Errors like this may invalidate financial calculations\012\000"
.align 2; _453:.ascii "Testing powers Z^i for small Integers Z and i.\012\000"
.align 2; _450:.ascii "sqrt gets too many last digits wrong\000"
.align 2; _448:.ascii "to %.7e ulps.\012\000"
.align 2; _447:.ascii "Observed errors run from %.7e \000"
.align 2; _446:.ascii "Square root is neither chopped nor correctly rounded.\012\000"
.align 2; _443:.ascii "Square root appears to be chopped.\012\000"
.align 2; _438:.ascii "Square root appears to be correctly rounded.\012\000"
.align 2; _433:.ascii " fails test whether sqrt rounds or chops.\012\000"
.align 2; _432:.ascii "Radix^Precision = %.7e\012\000"
.align 2; _431:.ascii "Anomalous arithmetic with Integer < \000"
.align 2; _391:.ascii "Testing whether sqrt is rounded or chopped.\012\000"
.align 2; _369:.ascii "sqrt(X) is non-monotonic for X near %.7e .\012\000"
.align 2; _368:.ascii "sqrt has passed a test for Monotonicity.\012\000"
.align 2; _351:.ascii "Test for sqrt monotonicity.\012\000"
.align 2; _340:.ascii "Testing if sqrt(X * X) == X for %d Integers X.\012\000"
.align 2; _335:.ascii "Square root of 0.0, -0.0 or 1.0 wrong\000"
.align 2; _333:.ascii "\012Running test of square root(x).\012\000"
.align 2; _332:.ascii "     No failures found in %d integer pairs.\012\000"
.align 2; _331:.ascii "X * Y == Y * X trial fails.\012\000"
.align 2; _322:long 0x40080000,0x0
.align 2; _321:.ascii "Testing on %d random pairs.\012\000"
.align 2; _320:.ascii "Does Multiplication commute?  \000"
.align 2; _317:.ascii "lack(s) of guard digits or failure(s) to correctly round or chop"
.ascii "\012(noted above) count as one flaw in the final tally below\000"
.align 2; _315:.ascii "Sticky bit used incorrectly or not at all.\012\000"
.align 2; _314:.ascii "Sticky bit apparently used correctly.\012\000"
.align 2; _297:.ascii "Checking for sticky bit.\012\000"
.align 2; _294:.ascii "(X - Y) + (Y - X) is non zero!\012\000"
.align 2; _291:.ascii "Addition/Subtraction neither rounds nor chops.\012\000"
.align 2; _290:.ascii "Add/Subtract\000"
.align 2; _287:.ascii "Addition/Subtraction appears to round correctly.\012\000"
.align 2; _280:.ascii "Add/Subtract appears to be chopped.\012\000"
.align 2; _275:.ascii "Incomplete carry-propagation in Addition\000"
.align 2; _271:.ascii "Radix * ( 1 / Radix ) differs from 1\000"
.align 2; _269:.ascii "/ is neither chopped nor correctly rounded.\012\000"
.align 2; _266:.ascii "Division appears to chop.\012\000"
.align 2; _263:.ascii "Division\000"
.align 2; _260:.ascii "Division appears to round correctly.\012\000"
.align 2; _255:.ascii "Multiplication\000"
.align 2; _252:.ascii "* is neither chopped nor correctly rounded.\012\000"
.align 2; _251:.ascii "Multiplication appears to chop.\012\000"
.align 2; _248:.ascii "Multiplication appears to round correctly.\012\000"
.align 2; _238:.ascii "X * (1/X) differs from 1\000"
.align 2; _219:.ascii "Checking rounding on multiply, divide and add/subtract.\012\000"
.align 2; _218:.ascii "     *, /, and - appear to have guard digits, as they should.\012"
.ascii "\000"
.align 2; _215:.ascii "  ...  if (X == 1.0) {.....} else {.../(X-1.0)...}\012\000"
.align 2; _214:.ascii "  such precautions against division by zero as\012\000"
.align 2; _213:.ascii "  subtraction yields  (1-U1) - 1 = 0 , thereby vitiating\012\000"
.align 2; _212:.ascii "comparison alleges  (1-U1) < 1  although\012\000"
.align 2; _209:.ascii "- lacks Guard Digit, so cancellation is obscured\000"
.align 2; _204:.ascii "* and/or / gets too many last digits wrong\000"
.align 2; _200:.ascii "Computed value of 1/1.000..1 >= 1\000"
.align 2; _198:.ascii "Division lacks a Guard Digit, so X/1 != X\000"
.align 2; _193:.ascii "Division lacks a Guard Digit, so error can exceed 1 ulp\012or  1"
.ascii "/3  and  3/9  and  9/27 may disagree\000"
.align 2; _189:.ascii "* gets too many final digits wrong.\012\000"
.align 2; _187:.ascii "* lacks a Guard Digit, so 1*X != X\000"
.align 2; _184:.ascii "\012Checking for guard digit in *, /, and -.\012\000"
.align 2; _183:.ascii "Subtraction appears to be normalized, as it should be.\000"
.align 2; _178:.ascii "Subtraction is not normalized X=Y,X+Z != Y+Z!\000"
.align 2; _174:.ascii "roughly %g extra significant decimals.\012\000"
.align 2; _173:.ascii "precisely with about %g extra B-digits, i.e.\012\000"
.align 2; _172:.ascii "Some subexpressions appear to be calculated extra\012\000"
.align 2; _166:.ascii "of an\012extra-precision\000"
.align 2; _165:.ascii "Z1 = %.7e, or Z2 = %.7e \000"
.align 2; _164:.ascii ", or exact rational arithmetic a result\012\000"
.align 2; _163:.ascii "Because of unusual Radix = %f\000"
.align 2; _159:.ascii "\011U2 = %.7e, Z2 - U2 = %.7e\012\000"
.align 2; _158:.ascii "\011U1 = %.7e, Z1 - U1 = %.7e\012\000"
.align 2; _157:.ascii "Precision\000"
.align 2; _156:.byte 0
.align 2; _149:.ascii "That feature is not tested further by this program.\012\000"
.align 2; _144:.ascii "Possibly some part of this\000"
.align 2; _143:.ascii "by extra-precise evaluation of arithmetic subexpressions.\012\000"
.align 2; _142:.ascii "are symptoms of inconsistencies introduced\012\000"
.align 2; _141:.ascii "respectively  %.7e,  %.7e,  %.7e,\012\000"
.align 2; _140:.ascii "Disagreements among the values X1, Y1, Z1,\012\000"
.align 2; _118:.ascii "Precision worse than 5 decimal figures  \000"
.align 2; _116:.ascii "The number of significant digits of the Radix is %f .\012\000"
.align 2; _115:.ascii "logarithmic encoding has precision characterized solely by U1.\012"
.ascii "\000"
.align 2; _112:.ascii "of significant digits but, by itself, this is a minor flaw.\012\000"
.align 2; _111:.ascii "Precision cannot be characterized by an Integer number\012\000"
.align 2; _98:.ascii "Comparison is fuzzy,X=1 but X-1/2-1/2 != 0\000"
.align 2; _94:.ascii "(1-U1)-1/2 < 1/2 is FALSE, prog. fails?\000"
.align 2; _92:long 0x40240000,0x0
.align 2; _87:.ascii "Radix is not as good as 2 or 10\000"
.align 2; _83:.ascii "Radix is too big: roundoff problems\000"
.align 2; _81:.ascii "MYSTERY: recalculated Radix = %.7e .\012\000"
.align 2; _80:.ascii "Radix confirmed.\012\000"
.align 2; _77:long 0x3f847ae1,0x47ae147a
.align 2; _76:.ascii "gets better closest relative separation U1 = %.7e .\012\000"
.align 2; _75:.ascii "confirms closest relative separation U1 .\012\000"
.align 2; _60:.ascii "Recalculating radix and precision\012 \000"
.align 2; _59:.ascii "Closest relative separation found is U1 = %.7e .\012\012\000"
.align 2; _53:.ascii "Radix = %f .\012\000"
.align 2; _44:.ascii "Searching for Radix and Precision.\012\000"
.align 2; _43:.byte 10,0
.align 2; _42:.ascii "-1, 0, 1/2, 1, 2, 3, 4, 5, 9, 27, 32 & 240 are O.K.\012\000"
.align 2; _37:.ascii "5 != 4+1, 240/3 != 80, 240/4 != 60, or 240/5 != 48\000"
.align 2; _33:.ascii "9 != 3*3, 27 != 9*3, 32 != 8*4, or 32-27-4-1 != 0\000"
.align 2; _29:.ascii "1/2 + (-1) + 1/2 != 0\000"
.align 2; _25:.ascii "-1+1 != 0, (-1)+abs(1) != 0, or -1+(-1)*(-1) != 0\000"
.align 2; _21:.ascii "3 != 2+1, 4 != 3+1, 4+2*(-2) != 0, or 4-3-1 != 0\000"
.align 2; _19:long 0x3f50624d,0xd2f1a9fb
.align 2; _18:.ascii "Comparison alleges that -0.0 is Non-zero!\012\000"
.align 2; _13:.ascii "0+0 != 0, 1-1 != 0, 1 <= 0, or 1+1 != 2\000"
.align 2; _11:.ascii "Program is now RUNNING tests on small integers:\012\000"
.align 2; _7:long 0x3ff00000,0x0
.align 2; _6:long 0x0,0x0
.align 2; _2:.ascii "\012* * * FLOATING-POINT ERROR * * *\012\000"

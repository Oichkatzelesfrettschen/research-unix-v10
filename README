These files were pared from a 1995 snapshot of the source code for
post-Tenth-Edition Research UNIX, as used in the Computing Science
Research Center at Bell Labs.  It is in no sense a formal distribution,
and it is unlikely that it can be made into a working system without
a fair amount of hand-waving, not to mention obsolete hardware; rather
it is meant as a piece of the historic record.
The repository is now undergoing digital necromancy and strives to boot in QEMU.

It has been trimmed in several ways:
- It was habit at the time to put a copy of all source code that seemed
interesting in /usr/src, even if it came from outside and required little
or no surgery to make work, and in some cases even if it was never used
or even consistently installed.  None of these seem an important part of
the history of this system; most cases, especially large ones, have been
expunged.
- Some programs were in some sense part of the system, but encumbered in
one way or another so that it is (even more) unclear whether it is fair
to redistribute them.  They have been set aside as well.  Some marginal
cases that are key to the system (e.g. the pcc2 C compiler, modified by
Research from code that came from the System III/System V developers)
remain.

There remain parts that ought to be thought of as encumbered, especially
the documentation (which was published as a copyrighted book); and the
overall system was never released save under single-target letter agreements.
As of this writing (March 2003) it is not obvious that it is covered by
extant Ancient Systems license agreements.

The files are stored in three GNU-compressed tar archives:

secombe.gz (the heavy one)
	Source code for UNIX proper, including commands, libraries,
	and OS kernel.  Originally rooted at /usr/src.
milligan.gz (the eclectic high-flying one)
	Source and perhaps some binaries for the AT&T 5620 (jerq) code.
	Originally rooted at /usr, i.e. directory jerq in the archive
	was /usr/jerq.
sellers.gz (the well-dressed one)
	Documentation; originally rooted in /usr/src, but it would
	make as much sense in /usr.  Subdirectory man is Volume 1 of
	the manual, with some additional tools used to produce the
	printed version; subdirectory vol2 is Volume 2.

Using the metrics script
------------------------
A helper script in tools/metrics.sh collects simple repository statistics.
Run it from the repository root:

    sh tools/metrics.sh

If cloc or tokei are installed the script writes language_breakdown.csv and
token_analysis.json with a breakdown of the source.

Remember to run this script after every commit to keep metrics current.
You can capture the output like so:

    sh tools/metrics.sh > metrics_results.log

Testing
-------
Run the C23 test suite with:

    make test

The script honors the CC environment variable, defaulting to `cc`.

The command compiles a small C23 example under `modern/tests/` and
checks that it runs correctly.

Cross compiling
---------------
Before running `make` with a cross compiler, source the helper script
and pass it your toolchain prefix:

```sh
. tools/cross-env.sh i386-linux-gnu-
```

Replace the argument with the desired target triple such as
`vax-unknown-linux-gnu-`.  The script exports `CROSS_COMPILE`, `CC` and
other variables used by the Makefiles.

Booting in QEMU
---------------
The repository contains source for the VAX version of Research UNIX.
The files under `v10/sys/` build the kernel while `v10/sys/boot`
holds the boot blocks.  Building requires a VAX capable tool chain.

Prerequisites
~~~~~~~~~~~~~
* `qemu-system-vax` from QEMU
* a VAX cross C compiler (for example GCC or lcc)
* `make`

Building the kernel and boot loader
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Build the kernel using the provided Makefile:

   ```sh
   make -C v10/sys
   ```

   To enable the ticket spinlock implementation run:

   ```sh
   make -C v10/sys SMP=1
   ```

   Cross compilation is possible by setting the compiler:

   ```sh
   make -C v10/sys CC=<cross-prefix>gcc
   ```

   This populates `v10/sys` with the `unix` kernel image.

2. Build the MicroVAX boot blocks:

   ```sh
   cd boot/uvax
   mk 1kmscp
   ```

   The resulting `1kmscp` file can be used as the boot block.

Launching QEMU
~~~~~~~~~~~~~~
With a disk image that contains the built kernel at the start of the
filesystem, QEMU can load it using the boot block built above:

```sh
qemu-system-vax -M microvax2 -drive file=disk.img,if=none,id=hd0 \
    -device vax-hd,drive=hd0 -boot d -kernel unix -bios 1kmscp
```

Adjust the disk image path and other options to taste.  See the files in
`v10/sys/boot` for details on the boot code layout.

Building with make
------------------
The repository provides a simple GNUmakefile. Invoke `make` at the root
to compile the kernel and a subset of userland programs via the Plan 9
`mk` scripts.

    make

Enable spinlock primitives and symmetric multiprocessing support with:

    make SMP=1

Run the regression tests with:

    make test

Continuous integration triggers the verification workflow by calling the
`check` target, which simply runs the test suite:

    make check

See the "Booting in QEMU" section above (lines 70‑110) for the
`lccmkall` cross‑compilation setup script and an example `qemu-system-vax`
command line.
